scale_size_continuous(range = c(0.2,8))+#更改点的大小
ggtitle(label = titlename)+
theme(plot.title = element_text(size = 16,hjust = 0.5, family = "mono"),
legend.title = element_text(size = 10,family = "mono"),
legend.text = element_text(size = 10,family = "mono"),
axis.title =  element_text(size = 12,family = "mono"),
axis.text =  element_text(size = 10,family = "mono"),
panel.grid=element_blank(),
#标签位置
legend.position = "right",
legend.box = "horizontal"
)+
guides(col=guide_colorbar(title="-log10(p adjusted)"),
size="none")+#去掉size的标签
scale_x_continuous(limits=c(-max(abs(data$log2FC)),max(abs(data$log2FC))))+#固定横坐标范围
scale_y_continuous(limits=c(0,max(abs(data$log10p))))+#固定纵坐标范围
#添加点的标签
geom_text(aes(label= ifelse(abs(log2FC)>0.5&log10p>-log10(0.05),label,NA),
size=1,
vjust=2,hjust=1,angle=0),
color="#333333",family="serif")+
xlab("log2Foldchange")+
ylab("-log10(FDR)")
return(p)
}
#volcanoplot
d<-volcanoplot("data/metabolitesg.csv",CK=1:6, TR=13:18,titlename="CK H volcano plot")
d
output<-"D:/R_work/master-s-thesis-project/pic/volcano_CK_H.png"
ggsave(output, plot = d, width = 25, height = 25,dpi = 300,units = "cm")
e<-volcanoplot("data/metabolitesg.csv",CK=1:6, TR=7:12,titlename="CK L volcano plot")
e
output<-"D:/R_work/master-s-thesis-project/pic/volcano_CK_L.png"
ggsave(output, plot = e, width = 25, height = 25,dpi = 300,units = "cm")
#library(patchwork)
f<-e+d
f
output<-"D:/R_work/master-s-thesis-project/pic/volcano_combined.png"
ggsave(output, plot = f, width = 40, height = 25,dpi = 300,units = "cm")
# 加载必要的库
library(pls)
library(caret)
input<-"data/metabolitesg.csv"
TR<-c(1:6,13:18)
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
metabolites<-metabolites[TR,]
X <- as.matrix(metabolites[,1:(dim(metabolites)[2]-1)])
Y <- as.numeric(as.factor(metabolites$Group))
# 建立PLS模型
model <- plsr(Y~X, scale = TRUE)
calc_vip <- function(model) {
# 提取主成分数量
p <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
# 计算每个预测变量的 VIP 值
for (j in 1:nrow(W)) {
numerator <- sum(T^2 * W[j, ]^2)
denominator <- sum(T_squared_sum)
vip_values[j] <- sqrt(p * numerator / denominator)
}
return(vip_values)
}
# 输出VIP值
vip_values <- calc_vip(model)
print(vip_values)
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
T
# 提取载荷矩阵
W <- model$loadings
W
T[1]
T[1]^2
T[11]^2
T[11,11]
T[12]
T[13]
rowSums(T^2)
model$scores
calc_vip <- function(model) {
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
#提取特征数量
p<-nrow(W)
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
# 计算每个预测变量的 VIP 值
for(j in 1:p){
for (k in 1:m) {
numerator<-sum(T[,k]^2* W[j, k]^2)
denominator <- sum(rowSums(T[,k]^2) * (W[j,k]^2))
vip_values[j] <- sqrt(p * numerator / denominator)
}
}
return(vip_values)
}
# 输出VIP值
vip_values <- calc_vip(model)
T[,11]
calc_vip <- function(model) {
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
#提取特征数量
p<-nrow(W)
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
# 计算每个预测变量的 VIP 值
for(j in 1:p){
for (k in 1:m) {
numerator<-sum(T[,k]^2* W[j, k]^2)
denominator <- sum(sum(T[,k]^2) * (W[j,k]^2))
vip_values[j] <- sqrt(p * numerator / denominator)
}
}
return(vip_values)
}
# 输出VIP值
vip_values <- calc_vip(model)
print(vip_values)
# 加载必要的库
library(pls)
library(caret)
input<-"data/metabolitesg.csv"
TR<-c(1:6,13:18)
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
metabolites<-metabolites[TR,]
X <- as.matrix(metabolites[,1:(dim(metabolites)[2]-1)])
Y <- as.numeric(as.factor(metabolites$Group))
# 建立PLS模型
model <- plsr(Y~X, scale = TRUE)
calc_vip <- function(model) {
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
#提取特征数量
p<-nrow(W)
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
# 计算每个预测变量的 VIP 值
for(j in 1:p){
numerator<-0
denominator <-0
for (k in 1:m) {
numerator<-T[,k]^2* W[j, k]^2+numerator
denominator <- sum(T[,k]^2) * (W[j,k]^2)+denominator
}
vip_values[j] <- sqrt(p * numerator / denominator)
}
return(vip_values)
}
# 输出VIP值
vip_values <- calc_vip(model)
print(vip_values)
# 获取特征名称
feature_names <- colnames(X)
# 计算并输出 VIP 值及对应的特征名称
vip_values <- calc_vip(model)
result <- data.frame(Feature = feature_names, VIP = vip_values)
View(result)
# 加载必要的库
library(pls)
library(caret)
input<-"data/metabolitesg.csv"
TR<-c(1:6,13:18)
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
metabolites<-metabolites[TR,]
X <- as.matrix(metabolites[,1:(dim(metabolites)[2]-1)])
Y <- as.numeric(as.factor(metabolites$Group))
# 建立PLS模型
model <- plsr(Y~X, scale = TRUE, ncomp=5)
calc_vip <- function(model) {
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
#提取特征数量
p<-nrow(W)
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
# 计算每个预测变量的 VIP 值
for(j in 1:p){
numerator<-0
denominator <-0
for (k in 1:m) {
numerator<-T[,k]^2* W[j, k]^2+numerator
denominator <- sum(T[,k]^2) * (W[j,k]^2)+denominator
}
vip_values[j] <- sqrt(p * numerator / denominator)
}
return(vip_values)
}
# 输出VIP值
vip_values <- calc_vip(model)
warnings()
# 获取特征名称
feature_names <- colnames(X)
result <- data.frame(Feature = feature_names, VIP = vip_values)
View(result)
T[,2]^2
calc_vip <- function(model) {
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
#提取特征数量
p<-nrow(W)
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
# 计算每个预测变量的 VIP 值
for(j in 1:p){
numerator<-0
denominator <-0
for (k in 1:m) {
numerator<-T[,k]^2* W[j, k]^2+numerator
denominator <- T[,k]^2 * (W[j,k]^2)+denominator
}
vip_values[j] <- sqrt(p * numerator / denominator)
}
return(vip_values)
}
# 输出VIP值
vip_values <- calc_vip(model)
print(vip_values)
# 输出VIP值
vip_values <- calc_vip(model)
print(vip_values)
calc_vip <- function(model) {
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
#提取特征数量
p<-nrow(W)
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
# 计算每个预测变量的 VIP 值
for(j in 1:p){
numerator<-0
denominator <-0
for (k in 1:m) {
numerator<-T[,k]^2* W[j, k]^2+numerator
denominator <- T[,k]^2 * (W[,k]^2)+denominator
}
vip_values[j] <- sqrt(p * numerator / denominator)
}
return(vip_values)
}
# 输出VIP值
vip_values <- calc_vip(model)
print(vip_values)
# 获取特征名称
feature_names <- colnames(X)
result <- data.frame(Feature = feature_names, VIP = vip_values)
View(result)
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
#提取特征数量
p<-nrow(W)
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
calc_vip <- function(model) {
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
#提取特征数量
p<-nrow(W)
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
# 计算每个预测变量的 VIP 值
for(j in 1:p){
numerator<-0
denominator <-0
for (k in 1:m) {
numerator<-T[,k]^2* W[j, k]^2+numerator
denominator <- T[,k]^2 * (W[j,]^2)+denominator
}
vip_values[j] <- sqrt(p * numerator / denominator)
}
return(vip_values)
}
# 输出VIP值
vip_values <- calc_vip(model)
print(vip_values)
# 获取特征名称
feature_names <- colnames(X)
result <- data.frame(Feature = feature_names, VIP = vip_values)
View(result)
W[,1]^2
T[,k]^2 * (W[j,]^2)
k=1
j=1
T[,k]^2 * (W[j,]^2)
T[,k]^2* W[j, k]^2
a<-T[,k]^2* W[j, k]^2
b<-T[,k]^2 * (W[j,]^2)
a/b
sum((W[j,]^2))
calc_vip <- function(model) {
# 提取主成分数量
m <- model$ncomp
# 提取主成分得分矩阵
T <- model$scores
# 提取载荷矩阵
W <- model$loadings
#提取特征数量
p<-nrow(W)
# 计算每个主成分的得分的平方和
T_squared_sum <- rowSums(T^2)
# 初始化存储 VIP 值的向量
vip_values <- numeric(ncol(W))
# 计算每个预测变量的 VIP 值
for(j in 1:p){
numerator<-0
denominator <-0
for (k in 1:m) {
numerator<-T[,k]^2* W[j, k]^2+numerator
denominator <- T[,k]^2 * sum((W[j,]^2))+denominator
}
vip_values[j] <- sqrt(p * numerator / denominator)
}
return(vip_values)
}
# 输出VIP值
vip_values <- calc_vip(model)
print(vip_values)
# 获取特征名称
feature_names <- colnames(X)
result <- data.frame(Feature = feature_names, VIP = vip_values)
View(result)
install.packages("chillR")
library(cHillR)
library(chillR)
vip(model)
input<-"data/metabolitesg.csv"
TR<-c(1:6,13:18)
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
input<-"data/metabolitesg.csv"
TR<-c(1:6,13:18)
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
metabolites<-read.table(input,header=F,row.names=1,check.names = FALSE,sep = ",")
View(metabolites)
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
#pcaplot
#设置各个组的颜色
color= c("CK"="violet","L"="lightblue2","H"="lightgreen")
a<-pcaplot("data/metabolitesg.csv",color= color)
a
pcaplot
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
data <- read.table(input, header = T, row.names = 1, check.names = F,
sep = ",")
#BiocManager::install("mixOmics")
library(mixOmics)
input<-"data/metabolitesg.csv"
TR<-c(1:6,13:18)
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
metabolites<-metabolites[TR,]
X <- as.matrix(metabolites[,1:(dim(metabolites)[2]-1)])
Y <- as.numeric(as.factor(metabolites$Group))
# 建立PLS模型
model <- plsr(Y~X, scale = TRUE, ncomp=5)
# 加载必要的库
library(pls)
library(caret)
vip(model)
#BiocManager::install("mixOmics")
library(mixOmics)
vip(model)
model<-pls(X,Y)
??pls
model<-plsda(X,Y)
Y <- as.factor(metabolites$Group)
model<-plsda(X,Y)
View(model)
vip(model)
library(chillR)
vip(model)
??vip
library(vip)
vip
edit(vip)
getAnywhere(vip)
package_path <- find.package("vip")
file_path <- file.path(package_path, "R")
list.files(file_path, pattern = "\\.R$")
file_path
install.packages("vip")
install.packages("vip")
# 加载必要的库
library(pls)
library(caret)
input<-"data/metabolitesg.csv"
TR<-c("CK","L")
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
metabolites<-metabolites[metabolites$Group==TR[1]|metabolites$Group==TR[2],]
X <- as.matrix(metabolites[,1:(dim(metabolites)[2]-1)])
Y <- as.factor(metabolites$Group)
model<-plsda(X,Y)
library(caret)
update.packages("caret")
library(caret)
update.packages("rlang")
library(caret)
remotes::install_version("caret", version = 1.1.1)
remotes::install_version("rlang", version = 1.1.1)
remotes::install_version("rlang", version = "1.1.1")
library(caret)
update("caret")
update.packages("caret")
library(caret)
# 加载必要的库
library(pls)
library(caret)
library(mixOmics)
library(rlang)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(mixOmics)
remove.packages("vctrs")
remove.packages("vctrs", lib="D:/Program Files2/R-4.2.2/library")
install.packages("vctrs")
install.packages("vctrs")
library(mixOmics)
# 加载必要的库
library(pls)
library(caret)
library(mixOmics)
input<-"data/metabolitesg.csv"
TR<-c("CK","L")
metabolites<-read.table(input,header=T,row.names=1,check.names = FALSE,sep = ",")
metabolites<-metabolites[metabolites$Group==TR[1]|metabolites$Group==TR[2],]
X <- as.matrix(metabolites[,1:(dim(metabolites)[2]-1)])
Y <- as.factor(metabolites$Group)
model<-plsda(X,Y)
vip(model)
vip_value<-model$vip
model<-pls(X,Y)
model<-plsda(X,Y)
vip_value<-vip(model)
model<-plsda(X,Y)
vip_value<-vip(model)
model<-plsda(X,Y)
vip_value<-vip(model)
compute_vip <- function(model) {
# 提取模型中的载荷矩阵和权重矩阵
W <- model$W
P <- model$loadings
# 计算每个变量对每个成分的贡献度
contrib <- W %*% t(P)^2
# 计算VIP值
vip <- colMeans(contrib)
return(vip)
}
# 输出VIP值
vip_values <- compute_vip(model)
vip_value<-varpls(model)$importance
vip_value<-vip(model)$importance
model<-plsda(X,Y,ncomp = 2)
vip_value<-vip(model)$importance
vip_value<-vip(model)
??plsda
model<-mint.plsda(X,Y,ncomp = 2)
