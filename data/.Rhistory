plot(g)
#画图
library(igraph)
#读取数据，一副图包括边和顶点两组数据
VE<-read.csv("D:/data_analysis/221022/correlationV.csv",header=T,fileEncoding="UTF-8",check.names=F)
ED<-read.csv("D:/data_analysis/221022/correlationE.csv",header=T,fileEncoding="UTF-8",check.names=F)
W<-read.csv("D:/data_analysis/221022/correlationW.csv",header=T,fileEncoding="UTF-8",check.names=F)
g<-graph.data.frame(ED,directed = "FALSE",vertices = VE)
plot(g)
V(g)$color<-VE$Color
vertex.shape<-ifelse(VE$Class=="metabolite","circle","square")
plot(g)
V(g)
vertex.shape<-ifelse(VE$Class=="metabolite","Square","Circle")
plot(g)
vertex.shape<-c("Square","Circle")
vertex.size<-
plot(g)
edge.width<-W
plot(g)
edge.width<-W*10
plot(g)
edge.width<-W*100
plot(g)
v(g)$shape<ifelse(VE$Class=="metabolite","circle","square")
V(g)$shape<ifelse(VE$Class=="metabolite","circle","square")
edge.width<-W*100
plot(g)
View(edge.width)
View(edge.width)
edge$width<-W*100
V(g)$color<-VE$Color
V(g)$shape<ifelse(VE$Class=="metabolite","circle","square")
View(VE)
View(W)
View(g)
#画图
library(igraph)
#读取数据，一副图包括边和顶点两组数据
VE<-read.csv("D:/data_analysis/221022/correlationV.csv",header=T,fileEncoding="UTF-8",check.names=F)
ED<-read.csv("D:/data_analysis/221022/correlationE.csv",header=T,fileEncoding="UTF-8",check.names=F)
W<-read.csv("D:/data_analysis/221022/correlationW.csv",header=T,fileEncoding="UTF-8",check.names=F)
g<-graph.data.frame(ED,directed = "FALSE",vertices = VE)
plot(g)
V(g)$color<-VE$Color
V(g)$shape<ifelse(VE$Class=="metabolite","circle","square")
plot(g)
E(g)$width<-W
plot(g)
#画图
library(igraph)
#读取数据，一副图包括边和顶点两组数据
VE<-read.csv("D:/data_analysis/221022/correlationV.csv",header=T,fileEncoding="UTF-8",check.names=F)
ED<-read.csv("D:/data_analysis/221022/correlationE.csv",header=T,fileEncoding="UTF-8",check.names=F)
W<-read.csv("D:/data_analysis/221022/correlationW.csv",header=T,fileEncoding="UTF-8",check.names=F)
g<-graph.data.frame(ED,directed = "FALSE",vertices = VE)
plot(g)
V(g)$color<-VE$Color
plot(g)
E(g)$width<-W
plot(g)
V(g)$shape<-"square"
plot(g)
#画图
library(igraph)
#读取数据，一副图包括边和顶点两组数据
VE<-read.csv("D:/data_analysis/221022/correlationV.csv",header=T,fileEncoding="UTF-8",check.names=F)
ED<-read.csv("D:/data_analysis/221022/correlationE.csv",header=T,fileEncoding="UTF-8",check.names=F)
W<-read.csv("D:/data_analysis/221022/correlationW.csv",header=T,fileEncoding="UTF-8",check.names=F)
g<-graph.data.frame(ED,directed = "FALSE",vertices = VE)
plot(g)
V(g)$color<-VE$Color
plot(g)
V(g)$shape<-"square"
plot(g)
V(g)[VE$Class="metabolite"]
V(g)[VE$Class=="metabolite"]
V(g)[VE$Class=="metabolite"]$shape<-"circle"
plot(g)
??igraph_options
igraph_options(vertex.label.size=30,
vertex.label.cex=1.75)
#读取数据，一副图包括边和顶点两组数据
VE<-read.csv("D:/data_analysis/221022/correlationV.csv",header=T,fileEncoding="UTF-8",check.names=F)
ED<-read.csv("D:/data_analysis/221022/correlationE.csv",header=T,fileEncoding="UTF-8",check.names=F)
g<-graph.data.frame(ED,directed = "FALSE",vertices = VE)
plot(g)
V(g)$color<-VE$Color
V(g)$shape<-"square"
V(g)[VE$Class=="metabolite"]$shape<-"circle"
plot(g)
W<-read.csv("D:/data_analysis/221022/correlationW.csv",header=T,fileEncoding="UTF-8",check.names=F)
igraph_options(vertex.size=30,
vertex.label.cex=1.75)
#读取数据，一副图包括边和顶点两组数据
VE<-read.csv("D:/data_analysis/221022/correlationV.csv",header=T,fileEncoding="UTF-8",check.names=F)
ED<-read.csv("D:/data_analysis/221022/correlationE.csv",header=T,fileEncoding="UTF-8",check.names=F)
g<-graph.data.frame(ED,directed = "FALSE",vertices = VE)
plot(g)
V(g)$color<-VE$Color
V(g)$shape<-"square"
V(g)[VE$Class=="metabolite"]$shape<-"circle"
plot(g)
igraph_options(vertex.size=30,
vertex.label.cex=1.75,
vertex.label.color="grey")
#读取数据，一副图包括边和顶点两组数据
VE<-read.csv("D:/data_analysis/221022/correlationV.csv",header=T,fileEncoding="UTF-8",check.names=F)
ED<-read.csv("D:/data_analysis/221022/correlationE.csv",header=T,fileEncoding="UTF-8",check.names=F)
g<-graph.data.frame(ED,directed = "FALSE",vertices = VE)
V(g)$color<-VE$Color
V(g)$shape<-"square"
V(g)[VE$Class=="metabolite"]$shape<-"circle"
plot(g)
W<-read.csv("D:/data_analysis/221022/correlationW.csv",header=T,fileEncoding="UTF-8",check.names=F)
igraph_options(vertex.size=10,
vertex.label.cex=1,
vertex.label.color="black")
#读取数据，一副图包括边和顶点两组数据
VE<-read.csv("D:/data_analysis/221022/correlationV.csv",header=T,fileEncoding="UTF-8",check.names=F)
ED<-read.csv("D:/data_analysis/221022/correlationE.csv",header=T,fileEncoding="UTF-8",check.names=F)
g<-graph.data.frame(ED,directed = "FALSE",vertices = VE)
V(g)$color<-VE$Color
V(g)$shape<-"square"
V(g)[VE$Class=="metabolite"]$shape<-"circle"
plot(g)
View(VE)
install.packages("devtools")
devtools::install_github("madeleineernst/RMolNetEnhancer")
update("rCSCS")
install.packages("rCSCS")
install.packages("blogdown")
install.packages("blogdown")
packageVersion("blogdown")
#install.packages("circlize")
library(circlize)
vignette("circlize")
#2做弦图的顺序
#circos.initialize()
#circos.track()
#circo.point() circos.lines() circos.text()
#circos.track()
#circo.point() circos.lines() circos.text()
#circos.clear()
sectors = c("d", "f", "e", "c", "g", "b", "a")#圈分为7部分
s2 = factor(sectors, levels = sectors)
circos.initialize(s2, xlim = c(0, 1))
#2做弦图的顺序
#circos.initialize()
#circos.track()
#circo.point() circos.lines() circos.text()
#circos.track()
#circo.point() circos.lines() circos.text()
#circos.clear()
sectors = c("d", "f", "e", "c", "g", "b", "a")#圈分为7部分
s2 = factor(sectors, levels = sectors)
circos.initialize(s2, xlim = c(0, 1))
circos.track(sectors, ylim = c(0, 1))
set_track_gap(cm_h(1.5))#设置圆圈之间的间隔宽度cm
circos.track(ylim = c(0, 1))
set_track_gap(mm_h(1))#设置圆圈之间的间隔宽度mm
circos.track(ylim = c(0, 1))
set_track_gap(mm_h(0.5))#设置圆圈之间的间隔宽度mm
circos.clear()#下个弦图重新开始画
circos.info()#获取当前图像信息
#3
#3.1设置弦图颜色
#3.1.1
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
col_fun(seq(-5, 1, by = 1)) # all the values smaller than -2 are all mapped to blue
#3.1.2
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
value = seq(-2, 2, by = 0.2)
value
col = col_fun(value)
col2value(col, col_fun = col_fun)
#3.2点circos.points
#3.2线circos.lines()
#3.4片段circos.segments()
#3.5文本circos.text()
#3.6正方形circos.rect()和多边形circos.polygon()
#3.7每个框内的坐标circos.axis() circos.xaxis() circos.yaxis()
#3.8柱状图circos.barplot() 箱线图circos.boxplot() 小提琴图circos.violin()
par(mfrow = c(1, 2))
circos.initialize(letters[1:4], xlim = c(0, 10))
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
value = runif(10)#生成十个随机数
circos.barplot(value, 1:10 - 0.5, col = 1:10)
})
circos.track(ylim = c(-1, 1), panel.fun = function(x, y) {
value = runif(10, min = -1, max = 1)
circos.barplot(value, 1:10 - 0.5, col = ifelse(value > 0, 2, 3))
})
circos.clear()
circos.initialize(letters[1:4], xlim = c(0, 10))
circos.track(ylim = c(0, 4), panel.fun = function(x, y) {
value = matrix(runif(10*4), ncol = 4)
circos.barplot(value, 1:10 - 0.5, col = 2:5)
})
#3.9圆圈箭头circos.arrow()
#3.10标签circos.labels()
#3.11图片circos.raster()
#3.12连线circos.link()
#3.13突出扇形区和轨道区draw.sector() highlight.sector()
#3.14与基本图像结合#text(0, 0, "This is\nthe center", cex = 1.5)#legend("bottomleft", pch = 1, legend = "This is the legend")#title("This is the title")
#4.添加标签
#5.高级弦图
#5.1条形柱状图
category = paste0("category", "_", 1:9)#paste0拼接字符串
percent = sort(sample(40:80, 9))
color = rev(rainbow(length(percent)))
library(circlize)
circos.par("start.degree" = 90, cell.padding = c(0, 0, 0, 0))
circos.initialize("a", xlim = c(0, 100)) # 'a` just means there is one sector（仅有一个扇形区域）
circos.track(ylim = c(0.5, length(percent)+0.5), track.height = 0.8,
bg.border = NA, panel.fun = function(x, y) {
xlim = CELL_META$xlim
circos.segments(rep(xlim[1], 9), 1:9,
rep(xlim[2], 9), 1:9,
col = "#CCCCCC")
circos.rect(rep(0, 9), 1:9 - 0.45, percent, 1:9 + 0.45,
col = color, border = "white")
circos.text(rep(xlim[1], 9), 1:9,
paste(category, " - ", percent, "%"),
facing = "downward", adj = c(1.05, 0.5), cex = 0.8)
breaks = seq(0, 85, by = 5)
circos.axis(h = "top", major.at = breaks, labels = paste0(breaks, "%"),
labels.cex = 0.6)
})
#5.2直方图circos.trackHist()
x = rnorm(1600)
sectors = sample(letters[1:16], 1600, replace = TRUE)
circos.initialize(sectors, x = x)
circos.trackHist(sectors, x = x, col = "#999999",
border = "#999999")
circos.trackHist(sectors, x = x, bin.size = 0.1,
col = "#999999", border = "#999999")
circos.trackHist(sectors, x = x, draw.density = TRUE,
col = "#999999", border = "#999999")
circos.clear()
#5.3系统发育树
#install.packages("ape")
library(ape)
data(bird.orders)
hc = as.hclust(bird.orders)
labels = hc$labels  # name of birds
ct = cutree(hc, 6)  # cut tree into 6 pieces
n = length(labels)  # number of bird species
dend = as.dendrogram(hc)
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initialize("a", xlim = c(0, n)) # only one sector
circos.track(ylim = c(0, 1), bg.border = NA, track.height = 0.3,
panel.fun = function(x, y) {
for(i in seq_len(n)) {
circos.text(i-0.5, 0, labels[i], adj = c(0, 0.5),
facing = "clockwise", niceFacing = TRUE,
col = ct[labels[i]], cex = 0.5)
}
})
suppressPackageStartupMessages(library(dendextend))
dend = color_branches(dend, k = 6, col = 1:6)
dend_height = attr(dend, "height")
circos.track(ylim = c(0, dend_height), bg.border = NA,
track.height = 0.4, panel.fun = function(x, y) {
circos.dendrogram(dend,facing="outside")#circos.dendrogram(dend, facing = "inside")反向发育树
})
circos.clear()
#5.4手动创建热图circos.heatmap()
#6.circos.heatmap()热图功能
#普通热图
set.seed(123)
mat1 = rbind(cbind(matrix(rnorm(50*5, mean = 1), nr = 50), #cbind按列合并，rbind按行合并
matrix(rnorm(50*5, mean = -1), nr = 50)),
cbind(matrix(rnorm(50*5, mean = -1), nr = 50), #五十行5列的矩阵
matrix(rnorm(50*5, mean = 1), nr = 50))
)
rownames(mat1) = paste0("R", 1:100)
colnames(mat1) = paste0("C", 1:10)
mat1 = mat1[sample(100, 100), ] # randomly permute rows 随机换行
split = sample(letters[1:5], 100, replace = TRUE)
split = factor(split, levels = letters[1:5])
library(ComplexHeatmap)#此包使用bioconductor下载
Heatmap(mat1, row_split = split)
#6.1输入数据
library(circlize) # >= 0.4.10
col_fun1 = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))#colorRamp2设置图的颜色
circos.heatmap(mat1, split = split, col = col_fun1)#split用于分组，col设定颜色
circos.clear()#一定不能不写
#6.2圆形布局
circos.par(start.degree = 90, gap.degree = 10)#起始角度；间隔角度
circos.heatmap(mat1, split = split, col = col_fun1, track.height = 0.4, #track.height表示扇形宽度
bg.border = "green",
bg.lwd = 2, #线条宽度
bg.lty = 2, #线条类型
show.sector.labels = TRUE)#是否展示扇形的标签
circos.clear()#一定不能不写
#6.3树状图Dendrograms和行名
circos.heatmap(mat1, split = split, col = col_fun1,
dend.side = "inside",#dend.side控制树的位置（内外）
rownames.side = "outside",#行名的位置（与树不能在同一侧）
rownames.col = 1:nrow(mat1) %% 10 + 1,#文字的颜色
rownames.cex = runif(nrow(mat1), min = 0.3, max = 2),#文字的缩放倍数
rownames.font = 1:nrow(mat1) %% 4 + 1)#文字的字体样式
circos.clear()
#6.4聚类：默认情况下，数值矩阵按行聚集。cluster参数可以设置为FALSE关闭集群。当然，当cluster设置为时FALSE，即使设置了也不会绘制树状图dend.side。
#不支持矩阵列上的聚类
#6.5树状图的回调
library(dendextend)
dend_col = structure(1:5, names = letters[1:5])
circos.heatmap(mat1, split = split, col = col_fun1, dend.side = "inside",
dend.track.height = 0.2,#树状图的轨道高度
dend.callback = function(dend, m, si) {#dend：当前扇区的树状图。m：当前扇区对应的子矩阵。si：当前扇区的扇区索引（或扇区名称）。
# when k = 1, it renders one same color for the whole dendrogram
color_branches(dend, k = 1, col = dend_col[si])#为五个扇区中的树状图分配不同的颜色
}
)
circos.clear()
#6.6多个热图轨迹
mat2 = mat1[sample(100, 100), ] # 随机打乱数据
col_fun2 = colorRamp2(c(-2, 0, 2), c("green", "white", "red"))#设置第二个数据的参数
circos.heatmap.initialize(mat1, split = split)#根据mat1生成树
circos.heatmap(mat2, col = col_fun2, dend.side = "outside")
circos.heatmap(mat1, col = col_fun1)#虽然mat1在第二个轨道，树依旧根据第mat1生成
#与散点图结合
circos.heatmap(mat1, split = split, col = col_fun1)
row_mean = rowMeans(mat1[, 1:5])
circos.track(ylim = range(row_mean), panel.fun = function(x, y) {
y = row_mean[CELL_META$subset]
y = y[CELL_META$row_order]
circos.lines(CELL_META$cell.xlim, c(0, 0), lty = 2, col = "grey")
circos.points(seq_along(y) - 0.5, y, col = ifelse(y > 0, "red", "blue"))
}, cell.padding = c(0.02, 0, 0.02, 0))#添加cell.padding = c(0.02, 0, 0.02, 0)这样最大和最小点不会与单元格的顶部和底部边界重叠。
#6.8添加注释
#设置自己的扇形标签
circos.heatmap(mat1, split = split, col = col_fun1)
circos.track(track.index = get.current.track.index(), #设置track.index = get.current.track.index()以确保始终将标签添加到正确的轨道中
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter,#x轴的数据点
CELL_META$cell.ylim[2] + convert_y(2, "mm"), #y轴的数据点
paste0("this is group ", CELL_META$sector.index),#每个点的标签
facing = "bending.inside",#文字的朝向
cex = 0.8,#字体大小
adj = c(0.5, 0), #文本的偏移度
niceFacing = TRUE)#文字的朝向是否应该被调整到适合人眼
}, bg.border = NA)#不要边框
vignette("circlize")
library(ropls)
dataMatrix<-read.csv("D:/R_work/师弟的数据/metadata.csv",header = TRUE,row.names = 1,check.names = FALSE)#行名是样品，列名是代谢物
sacurine.pca<-opls(dataMatrix)
dataMatrix<-read.csv("D:/R_work/师弟的数据/metadata.csv",header = TRUE,row.names = 1,check.names = FALSE)#行名是样品，列名是代谢物
sacurine.pca<-opls(dataMatrix)
sampleMetaData<-read.csv("D:/R_work/师弟的数据/sampleclass.csv",header = TRUE,row.names = 1,stringsAsFactors = F)
ClassFc <- sampleMetaData[, "Class"]
plot(sacurine.pca,
typeVc = "x-score",
parAsColFcVn = ClassFc,#按照gender分类
#parLabVc=as.character(sampleMetaData[,"Class"]),#点上显示分组，这行删掉什么都不显示
parPaletteVc=c("blue","red","green","grey","violet"))#指定每组的颜色
library(ropls)
dataMatrix<-read.csv("D:/R_work/师弟的数据/metadata_A.csv",header = TRUE,row.names = 1,check.names = FALSE)#行名是样品，列名是代谢物
sacurine.pca<-opls(dataMatrix)
sampleMetaData<-read.csv("D:/R_work/师弟的数据/sampleclass_A.csv",header = TRUE,row.names = 1,stringsAsFactors = F)
ClassFc <- sampleMetaData[, "Class"]
plot(sacurine.pca,
typeVc = "x-score",
parAsColFcVn = ClassFc,#按照gender分类
#parLabVc=as.character(sampleMetaData[,"Class"]),#点上显示分组，这行删掉什么都不显示
parPaletteVc=c("blue","red","green","grey","violet"))#指定每组的颜色
library(ropls)
dataMatrix<-read.csv("D:/R_work/师弟的数据/metadata_B.csv",header = TRUE,row.names = 1,check.names = FALSE)#行名是样品，列名是代谢物
sacurine.pca<-opls(dataMatrix)
sampleMetaData<-read.csv("D:/R_work/师弟的数据/sampleclass_B.csv",header = TRUE,row.names = 1,stringsAsFactors = F)
ClassFc <- sampleMetaData[, "Class"]
plot(sacurine.pca,
typeVc = "x-score",
parAsColFcVn = ClassFc,#按照gender分类
#parLabVc=as.character(sampleMetaData[,"Class"]),#点上显示分组，这行删掉什么都不显示
parPaletteVc=c("blue","red","green","grey","violet"))#指定每组的颜色
sacurine.pca
View(sacurine.pca)
library(psych)
USJudgeRatings
Harman.23
Harman23
Harman23.cor
Harman23.cor$cov
rc<-principal(dataMatrix[,-1],nfactors = 6)
View(dataMatrix)
rc<-principal(dataMatrix[,-1],nfactors = 3)
View(dataMatrix)
dataMatrix[,-1]
a<-dataMatrix[,-1]
View(a)
rm(a)
rc<-principal(dataMatrix,nfactors = 3)
View(dataMatrix)
dataMatrix<-read.csv("D:/R_work/师弟的数据/metadata.csv",header = TRUE,row.names = 1,check.names = FALSE)#行名是样品，列名是代谢物
sacurine.pca<-opls(dataMatrix)
sampleMetaData<-read.csv("D:/R_work/师弟的数据/sampleclass.csv",header = TRUE,row.names = 1,stringsAsFactors = F)
library(psych)
rc<-principal(dataMatrix,nfactors = 3)
rc<-principal(dataMatrix,nfactors = 2)
log(dataMatrix, base = 2)
dM<-log(dataMatrix, base = 2)
View(dM)
View(dataMatrix)
View(dataMatrix)
View(df)
View(df)
View(dM)
scale(DM)
scale(dM)
F<-scale(dM)
View(`F`)
View(dM)
J<-scale(dataMatrix)
View(J)
F<-scale(dM.T)
help("scale")
J<-scale(dataMatrix, scale = row)
J<-scale(T(dataMatrix))
J<-scale(t(dataMatrix))
sum(dataMatrix[,1])
sum(j[,1])
sum(J[,1])
sum(J[1,])
J<-scale(t(dataMatrix))
J<-scale(t(dataMatrix))
sum(J[1,])
sum(J[1,])
sum(J[,1])
J<-scale(dataMatrix)
sum(J[,1])
sum(J[1,])
tes1<-read.csv("D:/R_work/ropls做OPLSDA/结肠样品VIP/datamatrix_log2.csv",header = T,row.names = 1)
tes2<-read.csv("D:/R_work/ropls做OPLSDA/结肠样品VIP/sampleMetadata_log201.csv",header = T,row.names = 1)
ClassFc <-tes2$Class
ClassFc<-factor(ClassFc)
#PLSDA
library(ropls)
tes.plsda <- opls(tes1, ClassFc, orthoI = 0)
devtools::install_github("YiFanYUE99/meTool")
library(meTool)
?similarmass
?metaflux
library(meTool)
help(meTool)
??meTool
browseURL(meTool)
?similarmass
library(meTool)
setwd("D:/R_work/meTool/data")
a<-similarmass("20230906_C18_5min_QC_MS1_NEG.csv","20230906_C18_5min_QC_MS1_POS.csv",deltaRT = 0.05,deltamass =500)
b<-similarmass("20230906_C18_5min_QC_MS1_NEG.csv","20230906_HILIC_5min_QC_MS1_NEG.csv",deltaRT = NULL,deltamass =500)
c<-similarmass("20230906_C18_5min_QC_MS1_POS.csv","20230906_HILIC_5min_QC_MS1_POS.csv",deltaRT = NULL,deltamass =500)
d<-similarmass("20230906_HILIC_5min_QC_MS1_POS.csv","20230906_HILIC_5min_QC_MS1_NEG.csv",deltaRT = NULL,deltamass =500)
mylist1<-NULL
mylist2<-NULL
dim(a)[2]
1:dim(a)[1]/2
?for
?
??for (variable in vector) {
}
1:(dim(a)[1]/2)
for(i in 1:(dim(a)[1]/2)){
mylist1<-append(mylist1,list(a[2i,]))
mylist2<-append(mylist,list(a[2i-1,]))
}
for(i in 1:281){
mylist1<-append(mylist1,list(a[2i,]))
mylist2<-append(mylist,list(a[2i-1,]))
}
a[1,]
for(i in 1:281){
mylist1<-append(mylist1,a[2i,])
mylist2<-append(mylist,a[2i-1,])
}
for(i in 1:(dim(a)[1]/2)){
mylist1<-append(mylist1,list(a[2i,]))
mylist2<-append(mylist,list(a[2i-1,]))
}
a[i,
]
class(i)
for(j in 1:(dim(a)[1]/2)){
mylist1<-append(mylist1,list(a[2j,]))
for(j in 1:(dim(a)[1]/2)){
mylist1<-append(mylist1,list(a[2j,]))
for(j in 1:(dim(a)[1]/2)){
mylist1<-append(mylist1,list(a[2 * j,]))
mylist2<-append(mylist,list(a[2 * j-1,]))
}
for(j in 1:(dim(a)[1]/2)){
mylist1<-append(mylist1,list(a[2 * j,]))
mylist2<-append(mylist2,list(a[2 * j-1,]))
}
View(mylist1)
tables<-data.table::rbindlist(mylist1)
View(tables)
tablesa2<-data.table::rbindlist(mylist2)
View(tablesa2)
View(tables)
View(tablesa2)
tablesa1<-data.table::rbindlist(mylist1)
View(tablesa1)
library(dplyr)
View(tablesa1)
tablesa1 <- tablesa1 %>% distinct(tablesa1$`Mass (avg)`, .keep_all = T)
View(tablesa1)
tablesa2<-tablesa2 %>% distinct(tablesa2$`Mass (avg)`, .keep_all = T)
View(tablesa2)
